
import pyrealsense2 as rs

import numpy as np

import cv2

위 라이브러리를 import 시켜야 한다.

pip install pyrealsense2     # pyrealsense2
pip install numpy            # numpy
pip install opencv-python    # cv2

여기서 pyrealsense2가 설치가 안될 수 있는데 https://pypi.org/project/pyrealsense2/#files 이 사이트로 들어가서 
pyrealsense2-2.55.1.6486-cp311-cp311-manylinux1_x86_64.whl 라고 적어진 파일을 다운로드하여 리눅스에서 설치한다.

설치 명령어 : pip install pyrealsense2-2.55.1.6486-cp311-cp311-manylinux1_x86_64.whl

파일 설치할 때 파이썬 버전을 3.11.xx로 맞춰야 하기 때문에 다른 버전이면 버전 수정 후 설치. 파이썬 재설치에는 파이썬 말고도 pip도 새로 설치해야 한다.
그래도 안되면... 직접 해봐야 될듯

------------------------------------------------------------------------------------------------------------------------------------------------

실행 방법 : 
그냥 run 시키면 된다. 그러면 창 하나가 뜨는데 왼쪽은 일반 카메라로 찍은 화면, 오른쪽은 깊이가 적용된 색깔로 구별된 화면이 뜬다.
종료는 "ctrl + c"

------------------------------------------------------------------------------------------------------------------------------------------------

2025.01.14_14:23 :
Visual studio code 에서 우분투 가상환경에서 실행 안됨. 우분투에서 카메라 연결을 인식 못하는 문제.

-------------------------------------------------------------------------------------------------------------------------------------------------

2025.01.16 :
hand_tracking.py

import cv2
import mediapipe as mp

# MediaPipe 손 추적 모듈 초기화
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

# 손 추적 모델 설정 (기본값: 정밀도와 속도의 균형)
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=2, min_detection_confidence=0.5)

# 웹캠 열기 (윈도우에서는 기본적으로 0번 장치로 설정)
cap = cv2.VideoCapture(0)

# 웹캠이 제대로 열렸는지 확인
if not cap.isOpened():
    print("웹캠을 열 수 없습니다.")
    exit()

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("카메라에서 프레임을 읽을 수 없습니다.")
        break

    # BGR을 RGB로 변환 (MediaPipe는 RGB를 사용)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # 손 랜드마크 검출
    results = hands.process(rgb_frame)

    # 결과에 따라 랜드마크 그리기
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

    # 결과를 화면에 출력
    cv2.imshow('Hand Tracking', frame)

    # 'q' 키를 누르면 종료
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# 자원 해제
cap.release()
cv2.destroyAllWindows()
hands.close()
